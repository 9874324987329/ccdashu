<?xml version="1.0" encoding="utf-8"?>
<beans xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns="http://www.springframework.org/schema/beans"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd">

    <bean id="master" class="org.apache.tomcat.jdbc.pool.DataSource">
        <property name="driverClassName" value="#{dbConfig.mysqlDriver}"></property>
        <property name="url" value="#{dbConfig.getMasterConnection()}"></property>
        <property name="username" value="#{dbConfig.masterUsername}"></property>
        <property name="password" value="#{dbConfig.masterPassword}"></property>

        <!--公共配置属性-->
        <property name="maxActive" value="#{dbConfig.maxActive}"></property>
        <property name="initialSize" value="#{dbConfig.initialSize}"></property>
        <property name="minIdle" value="#{dbConfig.minIdle}"></property>
        <property name="jdbcInterceptors" value="#{dbConfig.jdbcInterceptors}"></property>
    </bean>


    <bean id="slave" class="org.apache.tomcat.jdbc.pool.DataSource">
        <property name="driverClassName" value="#{dbConfig.mysqlDriver}"></property>
        <property name="url" value="#{dbConfig.slaveConnection}"></property>
        <property name="username" value="#{dbConfig.slaveUsername}"></property>
        <property name="password" value="#{dbConfig.slavePassword}"></property>

        <!--公共配置属性-->
        <property name="maxActive" value="#{dbConfig.maxActive}"></property>
        <property name="initialSize" value="#{dbConfig.initialSize}"></property>
        <property name="minIdle" value="#{dbConfig.minIdle}"></property>
        <property name="jdbcInterceptors" value="#{dbConfig.jdbcInterceptors}"></property>
    </bean>

    <bean id="dataSource" class="com.chinaredstar.perseus.db.DynamicDataSource">
        <property name="master" ref="master"/>
        <property name="slaves">
            <list>
                <ref bean="slave"/>
            </list>
        </property>
    </bean>


    <!-- ibatis3 工厂类 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:sqlMapConfig.xml"/>
    </bean>
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory"/>
    </bean>

    <bean id="dynamicSqlSessionTemplate" class="com.chinaredstar.perseus.db.DynamicSqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionTemplate"/>
    </bean>


    <!-- 定义单个jdbc数据源的事务管理器 -->
    <bean id="transactionManager"
          class="com.chinaredstar.perseus.db.DynamicDataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!-- 以 @Transactional 标注来定义事务  -->
    <tx:annotation-driven transaction-manager="transactionManager"
                          proxy-target-class="true"/>


    <!-- 配置事务的传播特性 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="insert*" propagation="REQUIRED" read-only="false"
                       rollback-for="Exception"/>
            <tx:method name="delete*" propagation="REQUIRED" read-only="false"
                       rollback-for="Exception"/>
            <tx:method name="update*" propagation="REQUIRED" read-only="false"
                       rollback-for="Exception"/>
            <tx:method name="proc*" propagation="REQUIRED" read-only="false"
                       rollback-for="Exception" />
            <!--读也可以起事务,并且走从库,但是实际应用基本不会存在此场景,而且尽可能避免此情况的发生-->
            <!--<tx:method name="select*" read-only="true"/>-->
        </tx:attributes>
    </tx:advice>
    <!-- 那些类的哪些方法参与事务 -->
    <!--<aop:config>-->
        <!--<aop:pointcut id="allManagerMethod" expression="execution(* com.chinaredstar.demo.services.dao..*(..))"/>-->
        <!--<aop:advisor pointcut-ref="allManagerMethod" advice-ref="txAdvice"/>-->
    <!--</aop:config>-->

</beans>